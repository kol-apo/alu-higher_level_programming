class Student:
    def __init__(self, email, names):
        self.email = email
        self.names = names
        self.courses = {}
        self.grades = {}
        self.gpa = 0.0

    def register_course(self, course):
        self.courses[course.name] = course

    def add_grade(self, course_name, grade):
        self.grades[course_name] = grade
        self.calculate_gpa()

    def calculate_gpa(self):
        total_points = 0
        total_credits = 0
        for course_name, grade in self.grades.items():
            course = self.courses[course_name]
            total_points += grade * course.credits
            total_credits += course.credits
        if total_credits > 0:
            self.gpa = total_points / total_credits

    def get_transcript(self):
        transcript = f"Transcript for {self.names} ({self.email}):\n"
        for course_name, grade in self.grades.items():
            transcript += f"{course_name}: {grade}\n"
        transcript += f"GPA: {self.gpa:.2f}\n"
        return transcript

def add_student(students):
    email = input("Enter student's email: ")
    names = input("Enter student's name: ")
    students[email] = Student(email, names)

def add_course(courses):
    name = input("Enter course name: ")
    trimester = input("Enter trimester: ")
    credits = int(input("Enter course credits: "))
    courses[name] = Course(name, trimester, credits)

def register_student_for_course(students, courses):
    email = input("Enter student's email: ")
    course_name = input("Enter course name: ")
    if email in students and course_name in courses:
        students[email].register_course(courses[course_name])
    else:
        print("Student or course not found.")

def add_grade_to_student(students):
    email = input("Enter student's email: ")
    course_name = input("Enter course name: ")
    grade = float(input("Enter grade: "))
    if email in students and course_name in students[email].courses:
        students[email].add_grade(course_name, grade)
    else:
        print("Student or course not found.")

def rank_students(students):
    ranked_students = sorted(students.values(), key=lambda s: s.gpa, reverse=True)
    for rank, student in enumerate(ranked_students, start=1):
        print(f"{rank}. {student.names} - GPA: {student.gpa:.2f}")

def search_students_by_grade(students):
    course_name = input("Enter course name: ")
    grade = float(input("Enter grade: "))
    for student in students.values():
        if student.grades.get(course_name) == grade:
            print(f"{student.names} ({student.email}) - {course_name}: {grade}")

def print_transcripts(students):
    for student in students.values():
        print(student.get_transcript())

def main():
    students = {}
    courses = {}

    while True:
        print("1. Add Student")
        print("2. Add Course")
        print("3. Register Student for Course")
        print("4. Add Grade to Student")
        print("5. Rank Students by GPA")
        print("6. Search Students by Grade")
        print("7. Print Transcripts")
        print("8. Exit")
        choice = input("Choose an option: ")

        if choice == "1":
            add_student(students)
        elif choice == "2":
            add_course(courses)
        elif choice == "3":
            register_student_for_course(students, courses)
        elif choice == "4":
            add_grade_to_student(students)
        elif choice == "5":
            rank_students(students)
        elif choice == "6":
            search_students_by_grade(students)
        elif choice == "7":
            print_transcripts(students)
        elif choice == "8":
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
